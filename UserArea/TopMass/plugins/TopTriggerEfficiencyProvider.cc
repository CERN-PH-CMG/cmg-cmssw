#include "./TopTriggerEfficiencyProvider.h"


//default constructor
TopTriggerEfficiencyProvider::TopTriggerEfficiencyProvider()
{
}


//default destructor
TopTriggerEfficiencyProvider::~TopTriggerEfficiencyProvider()
{
}


//method to be called by the analysts:
//takes as input:
//- lepton: pt, eta and boolean to set the identity (1 is muon, 0 is electron)
//- fourth leading jet in the event: pt, eta
//- number of primary vertices in the event
//- number of jets in the event
//- boolean to indicate whether you want the weighted effiency of the complete datataking period (since the recommended cuts are different for separate datataking periods, this is not recommended) 
//- optional: if not running on the complete data, indicate the fraction of each period which is used.
//the method gives as output the weight to multiply the MC events with to correct for the trigger effiicnecies seen in data
//No trigger is required in the MC, this means we consider the efficiency in the MC to be 100%
double TopTriggerEfficiencyProvider::get_weight(double lep_pt, double lep_eta, double jet_pt, double jet_eta, int npvertices, int njets, bool LepIsMuon, bool complete_dataset, double fractionA, double fractionB, double fractionC, double fractionD)
{
  double LepEff = 0.;
  double JetEff = 0.;
  double weight = 0.;
  double conversionpercentagefloat = 0.0001; //the weights are given in percentages, need to convert the total weight to the range 0 - 1 
  double fractionDatasets[4] = {fractionA, fractionB, fractionC, fractionD};  
  if(!complete_dataset && (fractionA > 1 || fractionB > 1 || fractionC > 1 || fractionD > 1)){
    std::cout<<"The dataset fractions you specified are not sensible, please provide fractions between 0 and 1, will execute Full Dataset instead"<<std::endl;
    for(int i = 0; i<4; i++){ fractionDatasets[i] = 1.;}
  }
  if(complete_dataset){    for(int i = 0; i<4; i++){ fractionDatasets[i] = 1.;}} 

  //obtain the weight for the leptonic leg of the cross trigger
  if(LepIsMuon){LepEff = GetMuonWeight(lep_pt,lep_eta,npvertices,njets,fractionDatasets);}
  else{LepEff = GetElectronWeight(lep_pt,lep_eta,npvertices,fractionDatasets);}
  //obtain the weight for the hadronic leg of the cross trigger
  JetEff = GetJetWeight(jet_pt,jet_eta,njets,fractionDatasets);
  
  weight = LepEff*JetEff*conversionpercentagefloat;
  return weight;
}

//Make the array that carries the muon efficiency for each significant run period
//The muon efficiencies are parametrised as a function eta, pt and primary vertices. For each eta- and pt-bin, the dependence on the number of vertices is fitted with a straight line.
//The two fit parameters are included in the array for each bin, the first one being the slope, the second one being the offset. This function fits the efficiencies given in percentage.
//This array will be updated to also include a parametrisation as a function of the number of jets.
//DO NOT MODIFY AS ANALYST!
double TopTriggerEfficiencyProvider::make_MuonArray(int x, int y, int par, int Run)
{
    double MA[6][10][2]={{{-0.752171, 91.0531},{-0.64879, 91.8562},{-0.534625, 90.5947},{-0.54432, 90.4724},{-0.645572, 92.1929},{-0.470875, 90.6868},{-0.560432, 92.4973},{-0.768718, 94.6714},{-0.982329, 100.737},{0.287091, 77.1031}},
        {{-0.400215, 90.207},{-0.692123, 95.7093},{-0.553701, 92.3226},{-0.711945, 94.2481},{-0.481331, 92.6054},{-0.654747, 94.1619},{-0.319192, 89.2199},{-0.12268, 88.1642},{-0.749049, 92.8697},{2.36686, 30.7692}},
        {{-0.343859, 96.1718},{-0.352166, 98.0629},{-0.214358, 96.8577},{-0.212719, 97.2969},{-0.0932787, 95.991},{-0.0858359, 95.8649},{-0.095489, 96.1684},{-0.329936, 99.1263},{-0.35315, 100.06},{-1.69697, 115.394}},
        {{-0.251905, 94.5465},{-0.230757, 96.6334},{-0.274895, 97.8517},{-0.199916, 97.3803},{-0.0946217, 96.0983},{-0.0765823, 96.3575},{-0.116917, 95.9963},{-0.109791, 96.467},{-0.354982, 98.6909},{0.0926837, 88.8697}},
        {{-0.356716, 87.9228},{-0.424176, 92.301},{-0.561917, 92.5883},{-0.682236, 94.6023},{-0.573398, 93.1187},{-0.464596, 92.573},{-0.563948, 92.8974},{0.0440122, 88.4217},{-1.70191, 106.064} ,{2.5974, 38.961}},
        {{-0.593474, 90.9673},{-0.574178, 91.9589},{-0.509175, 92.2555},{-0.523067, 91.4285},{-0.45225, 91.3829},{-0.537276, 93.281},{-0.504504, 93.7162},{-0.160128, 88.1205},{-0.686798, 100.69} ,{-1.02791, 96.7161}}
    };

    double MB[6][10][2] ={{{-0.752171, 91.0531},{-0.64879, 91.8562},{-0.534625, 90.5947},{-0.54432, 90.4724},{-0.645572, 92.1929},{-0.470875, 90.6868},{-0.560432, 92.4973},{-0.768718, 94.6714},{-0.982329, 100.737},{0.287091, 77.1031}},
        {{-0.400215, 90.207},{-0.692123, 95.7093},{-0.553701, 92.3226},{-0.711945, 94.2481},{-0.481331, 92.6054},{-0.654747, 94.1619},{-0.319192, 89.2199},{-0.12268, 88.1642},{-0.749049, 92.8697},{2.36686, 30.7692}},
        {{-0.343859, 96.1718},{-0.352166, 98.0629},{-0.214358, 96.8577},{-0.212719, 97.2969},{-0.0932787, 95.991},{-0.0858359, 95.8649},{-0.095489, 96.1684},{-0.329936, 99.1263},{-0.35315, 100.06},{-1.69697, 115.394}},
        {{-0.251905, 94.5465},{-0.230757, 96.6334},{-0.274895, 97.8517},{-0.199916, 97.3803},{-0.0946217, 96.0983},{-0.0765823, 96.3575},{-0.116917, 95.9963},{-0.109791, 96.467},{-0.354982, 98.6909},{0.0926837, 88.8697}},
        {{-0.356716, 87.9228},{-0.424176, 92.301},{-0.561917, 92.5883},{-0.682236, 94.6023},{-0.573398, 93.1187},{-0.464596, 92.573},{-0.563948, 92.8974},{0.0440122, 88.4217},{-1.70191, 106.064} ,{2.5974, 38.961}},
        {{-0.593474, 90.9673},{-0.574178, 91.9589},{-0.509175, 92.2555},{-0.523067, 91.4285},{-0.45225, 91.3829},{-0.537276, 93.281},{-0.504504, 93.7162},{-0.160128, 88.1205},{-0.686798, 100.69} ,{-1.02791, 96.7161}}
    };

    double MC[6][10][2] ={{{-0.752171, 91.0531},{-0.64879, 91.8562},{-0.534625, 90.5947},{-0.54432, 90.4724},{-0.645572, 92.1929},{-0.470875, 90.6868},{-0.560432, 92.4973},{-0.768718, 94.6714},{-0.982329, 100.737},{0.287091, 77.1031}},
        {{-0.400215, 90.207},{-0.692123, 95.7093},{-0.553701, 92.3226},{-0.711945, 94.2481},{-0.481331, 92.6054},{-0.654747, 94.1619},{-0.319192, 89.2199},{-0.12268, 88.1642},{-0.749049, 92.8697},{2.36686, 30.7692}},
        {{-0.343859, 96.1718},{-0.352166, 98.0629},{-0.214358, 96.8577},{-0.212719, 97.2969},{-0.0932787, 95.991},{-0.0858359, 95.8649},{-0.095489, 96.1684},{-0.329936, 99.1263},{-0.35315, 100.06},{-1.69697, 115.394}},
        {{-0.251905, 94.5465},{-0.230757, 96.6334},{-0.274895, 97.8517},{-0.199916, 97.3803},{-0.0946217, 96.0983},{-0.0765823, 96.3575},{-0.116917, 95.9963},{-0.109791, 96.467},{-0.354982, 98.6909},{0.0926837, 88.8697}},
        {{-0.356716, 87.9228},{-0.424176, 92.301},{-0.561917, 92.5883},{-0.682236, 94.6023},{-0.573398, 93.1187},{-0.464596, 92.573},{-0.563948, 92.8974},{0.0440122, 88.4217},{-1.70191, 106.064} ,{2.5974, 38.961}},
        {{-0.593474, 90.9673},{-0.574178, 91.9589},{-0.509175, 92.2555},{-0.523067, 91.4285},{-0.45225, 91.3829},{-0.537276, 93.281},{-0.504504, 93.7162},{-0.160128, 88.1205},{-0.686798, 100.69} ,{-1.02791, 96.7161}}
    };

  double MD[6][10][2] ={{{-0.752171, 91.0531},{-0.64879, 91.8562},{-0.534625, 90.5947},{-0.54432, 90.4724},{-0.645572, 92.1929},{-0.470875, 90.6868},{-0.560432, 92.4973},{-0.768718, 94.6714},{-0.982329, 100.737},{0.287091, 77.1031}},
        {{-0.400215, 90.207},{-0.692123, 95.7093},{-0.553701, 92.3226},{-0.711945, 94.2481},{-0.481331, 92.6054},{-0.654747, 94.1619},{-0.319192, 89.2199},{-0.12268, 88.1642},{-0.749049, 92.8697},{2.36686, 30.7692}},
        {{-0.343859, 96.1718},{-0.352166, 98.0629},{-0.214358, 96.8577},{-0.212719, 97.2969},{-0.0932787, 95.991},{-0.0858359, 95.8649},{-0.095489, 96.1684},{-0.329936, 99.1263},{-0.35315, 100.06},{-1.69697, 115.394}},
        {{-0.251905, 94.5465},{-0.230757, 96.6334},{-0.274895, 97.8517},{-0.199916, 97.3803},{-0.0946217, 96.0983},{-0.0765823, 96.3575},{-0.116917, 95.9963},{-0.109791, 96.467},{-0.354982, 98.6909},{0.0926837, 88.8697}},
        {{-0.356716, 87.9228},{-0.424176, 92.301},{-0.561917, 92.5883},{-0.682236, 94.6023},{-0.573398, 93.1187},{-0.464596, 92.573},{-0.563948, 92.8974},{0.0440122, 88.4217},{-1.70191, 106.064} ,{2.5974, 38.961}},
        {{-0.593474, 90.9673},{-0.574178, 91.9589},{-0.509175, 92.2555},{-0.523067, 91.4285},{-0.45225, 91.3829},{-0.537276, 93.281},{-0.504504, 93.7162},{-0.160128, 88.1205},{-0.686798, 100.69} ,{-1.02791, 96.7161}}
    };
  

  if(Run == 0){  
   if(par == 0){
    return MA[x][y][0];
  }
  else{
    return MA[x][y][1];
  }
   }else if(Run == 1){
   if(par == 0){
      return MB[x][y][0];
    }
    else{
      return MB[x][y][1];
    }
  }else if(Run == 2){
   if(par == 0){
      return MC[x][y][0];
    }
    else{
      return MC[x][y][1];
    }
  }else{
    if(par == 0){
      return MD[x][y][0];
    }
    else{
      return MD[x][y][1];
    }
  }
}

//Make the array that carries the electron efficiency for each significant run period
//The electron efficiencies are parametrised as a function eta, pt and primary vertices. For each eta- and pt-bin, the dependence on the number of vertices is fitted with a straight line.
//The two fit parameters are included in the array for each bin, the first one being the slope, the second one being the offset. This function fits the efficiencies given in percentage.
//DO NOT MODIFY AS ANALYST!
double TopTriggerEfficiencyProvider::make_ElectronArray(int x, int y, int par, int Run)
{
  
  double ElA[13][8][2] = {{{-0.905302, 100.843},{0.148671, 93.7971},{-0.359845, 101.692},{8.13629e-15, 88.8889},{-0.241239, 100.285},{0.00833389, 98.1162},{0.0328606, 96.5461},{0, 0}},
		  {{-0.0671477, 90.1884},{-0.61468, 101.998},{-0.489576, 100.984},{-0.338926, 99.048},{-0.334795, 100.333},{-0.215429, 102.057},{-0.324105, 101.475},{-0.222223, 98.4445}},
		  {{-0.477403, 92.7457},{-0.282877, 92.2907},{-0.0151668, 95.4005},{-0.10791, 95.0546},{-0.209946, 98.3467},{0.0371496, 96.1522},{-0.22408, 99.8801},{0.0584793, 93.9766}},
		  {{3.36538, 43.75},{0, 0},{3.4965, 45.4545},{3.20513, 41.6667},{0, 0},{0, 0},{0, 0},{0, 0}},
		  {{0.0228694, 89.5992},{-0.343448, 98.5643},{-0.241243, 96.7564},{-0.191687, 98.5473},{-0.364586, 99.7192},{-0.145165, 97.0257},{-0.0272809, 97.1815},{-0.362036, 100.845}},
		  {{0.0491867, 90.8051},{0.0536091, 91.8191},{0.106302, 92.479},{-0.278581, 98.6725},{-0.158454, 98.5061},{0.0794827, 95.8251},{-0.0999762, 98.6573},{-0.0715347, 97.6513}},
		  {{-0.167921, 93.2714},{-0.0806372, 93.1113},{0.146412, 93.0304},{-0.180186, 96.5927},{-0.0904675, 96.624},{-0.104315, 97.7233},{0.00769314, 96.667},{0.0306586, 96.3314}},
		  {{-0.42262, 97.0613},{-0.00203724, 93.0514},{-0.157063, 95.8846},{-0.00731527, 94.4664},{-0.257879, 99.7208},{-0.0265745, 97.2225},{-0.0303667,96.9581},{0.179658, 95.0487}},
		  {{0.0520114, 88.8794},{-0.0888099, 93.3965},{0.0177191, 93.8742},{-0.0980571, 96.2529},{-0.368596, 99.0878},{-0.0586606, 97.7845},{0.218524,92.8764},{-0.922243, 104.846}},
		  {{-4.18182, 145.273},{3.4188, 44.4444},{3, 51},{-2.08333, 114.583},{0, 0},{2.31481, 41.6667},{0, 0},{0, 0}},
		  {{-0.444566, 90.0543},{0.25229, 89.8488},{-0.945062, 106.245},{-0.377907, 97.9252},{0.354967, 91.208},{-0.470761, 102.136},{0.521712, 89.094},{3.72208, 48.3871}},
		  {{0.395792, 81.301},{-0.769333, 104.778},{0.0447865, 94.5741},{-0.0208537, 96.3545},{0.159363, 94.9664},{-0.239378, 101.001},{-0.260546, 98.2382},{-1.22222, 113.667}},
		  {{-1.04203, 101.383},{-0.381594, 95.6575},{0.44283, 88.0355},{0.511154, 87.0064},{-0.292301, 100.167},{0.776587, 88.9066},{0.12381, 95.3905},{0.154109, 92.2968}},
                          };

  double ElB[13][8][2] = {{{-0.905302, 100.843},{0.148671, 93.7971},{-0.359845, 101.692},{8.13629e-15, 88.8889},{-0.241239, 100.285},{0.00833389, 98.1162},{0.0328606, 96.5461},{0, 0}},
		  {{-0.0671477, 90.1884},{-0.61468, 101.998},{-0.489576, 100.984},{-0.338926, 99.048},{-0.334795, 100.333},{-0.215429, 102.057},{-0.324105, 101.475},{-0.222223, 98.4445}},
		  {{-0.477403, 92.7457},{-0.282877, 92.2907},{-0.0151668, 95.4005},{-0.10791, 95.0546},{-0.209946, 98.3467},{0.0371496, 96.1522},{-0.22408, 99.8801},{0.0584793, 93.9766}},
		  {{3.36538, 43.75},{0, 0},{3.4965, 45.4545},{3.20513, 41.6667},{0, 0},{0, 0},{0, 0},{0, 0}},
		  {{0.0228694, 89.5992},{-0.343448, 98.5643},{-0.241243, 96.7564},{-0.191687, 98.5473},{-0.364586, 99.7192},{-0.145165, 97.0257},{-0.0272809, 97.1815},{-0.362036, 100.845}},
		  {{0.0491867, 90.8051},{0.0536091, 91.8191},{0.106302, 92.479},{-0.278581, 98.6725},{-0.158454, 98.5061},{0.0794827, 95.8251},{-0.0999762, 98.6573},{-0.0715347, 97.6513}},
		  {{-0.167921, 93.2714},{-0.0806372, 93.1113},{0.146412, 93.0304},{-0.180186, 96.5927},{-0.0904675, 96.624},{-0.104315, 97.7233},{0.00769314, 96.667},{0.0306586, 96.3314}},
		  {{-0.42262, 97.0613},{-0.00203724, 93.0514},{-0.157063, 95.8846},{-0.00731527, 94.4664},{-0.257879, 99.7208},{-0.0265745, 97.2225},{-0.0303667,96.9581},{0.179658, 95.0487}},
		  {{0.0520114, 88.8794},{-0.0888099, 93.3965},{0.0177191, 93.8742},{-0.0980571, 96.2529},{-0.368596, 99.0878},{-0.0586606, 97.7845},{0.218524,92.8764},{-0.922243, 104.846}},
		  {{-4.18182, 145.273},{3.4188, 44.4444},{3, 51},{-2.08333, 114.583},{0, 0},{2.31481, 41.6667},{0, 0},{0, 0}},
		  {{-0.444566, 90.0543},{0.25229, 89.8488},{-0.945062, 106.245},{-0.377907, 97.9252},{0.354967, 91.208},{-0.470761, 102.136},{0.521712, 89.094},{3.72208, 48.3871}},
		  {{0.395792, 81.301},{-0.769333, 104.778},{0.0447865, 94.5741},{-0.0208537, 96.3545},{0.159363, 94.9664},{-0.239378, 101.001},{-0.260546, 98.2382},{-1.22222, 113.667}},
		  {{-1.04203, 101.383},{-0.381594, 95.6575},{0.44283, 88.0355},{0.511154, 87.0064},{-0.292301, 100.167},{0.776587, 88.9066},{0.12381, 95.3905},{0.154109, 92.2968}},
                          };


  double ElC[13][8][2] = {{{-0.905302, 100.843},{0.148671, 93.7971},{-0.359845, 101.692},{8.13629e-15, 88.8889},{-0.241239, 100.285},{0.00833389, 98.1162},{0.0328606, 96.5461},{0, 0}},
		  {{-0.0671477, 90.1884},{-0.61468, 101.998},{-0.489576, 100.984},{-0.338926, 99.048},{-0.334795, 100.333},{-0.215429, 102.057},{-0.324105, 101.475},{-0.222223, 98.4445}},
		  {{-0.477403, 92.7457},{-0.282877, 92.2907},{-0.0151668, 95.4005},{-0.10791, 95.0546},{-0.209946, 98.3467},{0.0371496, 96.1522},{-0.22408, 99.8801},{0.0584793, 93.9766}},
		  {{3.36538, 43.75},{0, 0},{3.4965, 45.4545},{3.20513, 41.6667},{0, 0},{0, 0},{0, 0},{0, 0}},
		  {{0.0228694, 89.5992},{-0.343448, 98.5643},{-0.241243, 96.7564},{-0.191687, 98.5473},{-0.364586, 99.7192},{-0.145165, 97.0257},{-0.0272809, 97.1815},{-0.362036, 100.845}},
		  {{0.0491867, 90.8051},{0.0536091, 91.8191},{0.106302, 92.479},{-0.278581, 98.6725},{-0.158454, 98.5061},{0.0794827, 95.8251},{-0.0999762, 98.6573},{-0.0715347, 97.6513}},
		  {{-0.167921, 93.2714},{-0.0806372, 93.1113},{0.146412, 93.0304},{-0.180186, 96.5927},{-0.0904675, 96.624},{-0.104315, 97.7233},{0.00769314, 96.667},{0.0306586, 96.3314}},
		  {{-0.42262, 97.0613},{-0.00203724, 93.0514},{-0.157063, 95.8846},{-0.00731527, 94.4664},{-0.257879, 99.7208},{-0.0265745, 97.2225},{-0.0303667,96.9581},{0.179658, 95.0487}},
		  {{0.0520114, 88.8794},{-0.0888099, 93.3965},{0.0177191, 93.8742},{-0.0980571, 96.2529},{-0.368596, 99.0878},{-0.0586606, 97.7845},{0.218524,92.8764},{-0.922243, 104.846}},
		  {{-4.18182, 145.273},{3.4188, 44.4444},{3, 51},{-2.08333, 114.583},{0, 0},{2.31481, 41.6667},{0, 0},{0, 0}},
		  {{-0.444566, 90.0543},{0.25229, 89.8488},{-0.945062, 106.245},{-0.377907, 97.9252},{0.354967, 91.208},{-0.470761, 102.136},{0.521712, 89.094},{3.72208, 48.3871}},
		  {{0.395792, 81.301},{-0.769333, 104.778},{0.0447865, 94.5741},{-0.0208537, 96.3545},{0.159363, 94.9664},{-0.239378, 101.001},{-0.260546, 98.2382},{-1.22222, 113.667}},
		  {{-1.04203, 101.383},{-0.381594, 95.6575},{0.44283, 88.0355},{0.511154, 87.0064},{-0.292301, 100.167},{0.776587, 88.9066},{0.12381, 95.3905},{0.154109, 92.2968}},
                          };


  double ElD[13][8][2] = {{{-0.905302, 100.843},{0.148671, 93.7971},{-0.359845, 101.692},{8.13629e-15, 88.8889},{-0.241239, 100.285},{0.00833389, 98.1162},{0.0328606, 96.5461},{0, 0}},
		  {{-0.0671477, 90.1884},{-0.61468, 101.998},{-0.489576, 100.984},{-0.338926, 99.048},{-0.334795, 100.333},{-0.215429, 102.057},{-0.324105, 101.475},{-0.222223, 98.4445}},
		  {{-0.477403, 92.7457},{-0.282877, 92.2907},{-0.0151668, 95.4005},{-0.10791, 95.0546},{-0.209946, 98.3467},{0.0371496, 96.1522},{-0.22408, 99.8801},{0.0584793, 93.9766}},
		  {{3.36538, 43.75},{0, 0},{3.4965, 45.4545},{3.20513, 41.6667},{0, 0},{0, 0},{0, 0},{0, 0}},
		  {{0.0228694, 89.5992},{-0.343448, 98.5643},{-0.241243, 96.7564},{-0.191687, 98.5473},{-0.364586, 99.7192},{-0.145165, 97.0257},{-0.0272809, 97.1815},{-0.362036, 100.845}},
		  {{0.0491867, 90.8051},{0.0536091, 91.8191},{0.106302, 92.479},{-0.278581, 98.6725},{-0.158454, 98.5061},{0.0794827, 95.8251},{-0.0999762, 98.6573},{-0.0715347, 97.6513}},
		  {{-0.167921, 93.2714},{-0.0806372, 93.1113},{0.146412, 93.0304},{-0.180186, 96.5927},{-0.0904675, 96.624},{-0.104315, 97.7233},{0.00769314, 96.667},{0.0306586, 96.3314}},
		  {{-0.42262, 97.0613},{-0.00203724, 93.0514},{-0.157063, 95.8846},{-0.00731527, 94.4664},{-0.257879, 99.7208},{-0.0265745, 97.2225},{-0.0303667,96.9581},{0.179658, 95.0487}},
		  {{0.0520114, 88.8794},{-0.0888099, 93.3965},{0.0177191, 93.8742},{-0.0980571, 96.2529},{-0.368596, 99.0878},{-0.0586606, 97.7845},{0.218524,92.8764},{-0.922243, 104.846}},
		  {{-4.18182, 145.273},{3.4188, 44.4444},{3, 51},{-2.08333, 114.583},{0, 0},{2.31481, 41.6667},{0, 0},{0, 0}},
		  {{-0.444566, 90.0543},{0.25229, 89.8488},{-0.945062, 106.245},{-0.377907, 97.9252},{0.354967, 91.208},{-0.470761, 102.136},{0.521712, 89.094},{3.72208, 48.3871}},
		  {{0.395792, 81.301},{-0.769333, 104.778},{0.0447865, 94.5741},{-0.0208537, 96.3545},{0.159363, 94.9664},{-0.239378, 101.001},{-0.260546, 98.2382},{-1.22222, 113.667}},
		  {{-1.04203, 101.383},{-0.381594, 95.6575},{0.44283, 88.0355},{0.511154, 87.0064},{-0.292301, 100.167},{0.776587, 88.9066},{0.12381, 95.3905},{0.154109, 92.2968}},
                          };

  if(Run == 0){
    if(par == 0){
      return ElA[x][y][0];
    }
    else{
      return ElA[x][y][1];
    }
  }else if(Run == 1){
    if(par == 0){
      return ElB[x][y][0];
    }
    else{
      return ElB[x][y][1];
    }
  }else if(Run ==2){
    if(par == 0){
      return ElC[x][y][0];
    }
    else{
      return ElC[x][y][1];
    }
  }else{
    if(par == 0){
      return ElD[x][y][0];
    }
    else{
      return ElD[x][y][1];
    }
  }

}

//Make the array that carries the hadronic leg efficiency for each significant run period
//The hadronic efficiencies are parametrised as a function the number of jets in the event, the eta and pt of the fourth leading offline reconstructed jet in the event. For each number-of-jet-, eta- and pt-bin, the absolute efficiency in percent is given.
//DO NOT MODIFY AS ANALYST!
double TopTriggerEfficiencyProvider::make_JetArray(int x, int y, int z, double fractionDatasets[4])
{
  double JetA[4][9][11] ={ {{98.2301, 98.9247, 97.2973, 100, 98.1132, 100, 100, 100, 100, 100, 100 },{97.6378, 96.9697, 95.7143, 98.2143, 100, 100, 100, 100, 100, 100, 100 },{97.1014, 99.0099, 97.5904, 98.7013, 98.3871, 100, 100, 100, 100, 100, 100 },{97.7941, 96.5517, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{97.2028, 97.7778, 98.9474, 97.9592, 100, 100, 100, 100, 100, 100, 100 },{92.9078, 95, 98.8636, 98.75, 100, 100, 100, 100, 100, 100, 100 },{98.4, 99.0196, 100, 98.7805, 100, 100, 100, 100, 100, 100, 100 },{96.6667, 93.9394, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{95.614, 90.5882, 100, 100, 100, 94.7368, 100, 100, 100, 100, 100 } },
		   {{100, 100, 100, 100, 96, 100, 100, 100, 100, 100, 100 },{100, 100, 92.5926, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 96.6667, 100, 96.2264, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 98.1132, 100, 100, 100, 100, 100, 100 },{92.8571, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 97.1429, 100, 98, 97.6744, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 97.2973, 100, 100, 100, 100 },{100, 96, 100, 96.2963, 100, 100, 100, 100, 100, 100, 100 } },
		   {{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 80, 87.5, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 87.5, 100, 100, 100, 100, 100, 100, 100, 100, 100 } },
		   {{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 0, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 } }
  };
		 
  double JetB[4][9][11] = { {{98.2301, 98.9247, 97.2973, 100, 98.1132, 100, 100, 100, 100, 100, 100 },{97.6378, 96.9697, 95.7143, 98.2143, 100, 100, 100, 100, 100, 100, 100 },{97.1014, 99.0099, 97.5904, 98.7013, 98.3871, 100, 100, 100, 100, 100, 100 },{97.7941, 96.5517, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{97.2028, 97.7778, 98.9474, 97.9592, 100, 100, 100, 100, 100, 100, 100 },{92.9078, 95, 98.8636, 98.75, 100, 100, 100, 100, 100, 100, 100 },{98.4, 99.0196, 100, 98.7805, 100, 100, 100, 100, 100, 100, 100 },{96.6667, 93.9394, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{95.614, 90.5882, 100, 100, 100, 94.7368, 100, 100, 100, 100, 100 } },
		   {{100, 100, 100, 100, 96, 100, 100, 100, 100, 100, 100 },{100, 100, 92.5926, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 96.6667, 100, 96.2264, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 98.1132, 100, 100, 100, 100, 100, 100 },{92.8571, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 97.1429, 100, 98, 97.6744, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 97.2973, 100, 100, 100, 100 },{100, 96, 100, 96.2963, 100, 100, 100, 100, 100, 100, 100 } },
		   {{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 80, 87.5, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 87.5, 100, 100, 100, 100, 100, 100, 100, 100, 100 } },
		   {{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 0, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 } }
  };

  double JetC[4][9][11]= { {{98.2301, 98.9247, 97.2973, 100, 98.1132, 100, 100, 100, 100, 100, 100 },{97.6378, 96.9697, 95.7143, 98.2143, 100, 100, 100, 100, 100, 100, 100 },{97.1014, 99.0099, 97.5904, 98.7013, 98.3871, 100, 100, 100, 100, 100, 100 },{97.7941, 96.5517, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{97.2028, 97.7778, 98.9474, 97.9592, 100, 100, 100, 100, 100, 100, 100 },{92.9078, 95, 98.8636, 98.75, 100, 100, 100, 100, 100, 100, 100 },{98.4, 99.0196, 100, 98.7805, 100, 100, 100, 100, 100, 100, 100 },{96.6667, 93.9394, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{95.614, 90.5882, 100, 100, 100, 94.7368, 100, 100, 100, 100, 100 } },
		   {{100, 100, 100, 100, 96, 100, 100, 100, 100, 100, 100 },{100, 100, 92.5926, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 96.6667, 100, 96.2264, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 98.1132, 100, 100, 100, 100, 100, 100 },{92.8571, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 97.1429, 100, 98, 97.6744, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 97.2973, 100, 100, 100, 100 },{100, 96, 100, 96.2963, 100, 100, 100, 100, 100, 100, 100 } },
		   {{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 80, 87.5, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 87.5, 100, 100, 100, 100, 100, 100, 100, 100, 100 } },
		   {{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 0, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 } }
  };
  
  double JetD[4][9][11] = { {{98.2301, 98.9247, 97.2973, 100, 98.1132, 100, 100, 100, 100, 100, 100 },{97.6378, 96.9697, 95.7143, 98.2143, 100, 100, 100, 100, 100, 100, 100 },{97.1014, 99.0099, 97.5904, 98.7013, 98.3871, 100, 100, 100, 100, 100, 100 },{97.7941, 96.5517, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{97.2028, 97.7778, 98.9474, 97.9592, 100, 100, 100, 100, 100, 100, 100 },{92.9078, 95, 98.8636, 98.75, 100, 100, 100, 100, 100, 100, 100 },{98.4, 99.0196, 100, 98.7805, 100, 100, 100, 100, 100, 100, 100 },{96.6667, 93.9394, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{95.614, 90.5882, 100, 100, 100, 94.7368, 100, 100, 100, 100, 100 } },
		   {{100, 100, 100, 100, 96, 100, 100, 100, 100, 100, 100 },{100, 100, 92.5926, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 96.6667, 100, 96.2264, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 98.1132, 100, 100, 100, 100, 100, 100 },{92.8571, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 97.1429, 100, 98, 97.6744, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 97.2973, 100, 100, 100, 100 },{100, 96, 100, 96.2963, 100, 100, 100, 100, 100, 100, 100 } },
		   {{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 80, 87.5, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 87.5, 100, 100, 100, 100, 100, 100, 100, 100, 100 } },
		   {{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 0, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 },{0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100 } }
  };

  double ALumi = fractionDatasets[0]*0.719;
  double BLumi = fractionDatasets[1]*4.518;
  double CLumi = fractionDatasets[2]*7.000;
  double DLumi = fractionDatasets[3]*1.300;

  return (ALumi*JetA[x][y][z] + BLumi*JetB[x][y][z] + CLumi*JetC[x][y][z] + DLumi*JetD[x][y][z])/(ALumi+BLumi+CLumi+DLumi);
  
}

//Returns the weight, in percentage, for the muon leg of the muon+jets crosstrigger
double TopTriggerEfficiencyProvider::GetMuonWeight(double pt, double eta, int npvertices, int njets, double fractionDatasets[4])
{
  double MuonEtaBins[7] = {-2.1,-1.2,-0.9,0,0.9,1.2,2.1};
  double MuonPtBins[11] = {20,26,30,35,40,50,60,80,120,150,250};
  int nMuEtabins = 6;
  int nMuPtbins = 10;

  //basic check on the cutselection, is in no way complete
  if(fabs(eta) > 2.1 || pt < 20){std::cout<<"Your muon cut is not in sync with the Top reference selection! Please check your cutset again."<<std::endl; return 100;}

  int bin_x = 0;
  int bin_y = 0;

  //check in which bin the eta of the muon lies
  for(int i=1; i < nMuEtabins; i++){
    if(eta < MuonEtaBins[i] ){
      bin_x = i;
      break;
    }
  }
  //check in which bin the pt of the muon lies
  for(int i=1; i < nMuPtbins; i++){
    if(pt < MuonPtBins[i] ){
      bin_y = i;
      break;
    }
  }
  
  //obtain the fit parameters for the relevant bin for each datataking period
  double Apar[2] = {make_MuonArray(bin_x, bin_y, 0, 0), make_MuonArray(bin_x, bin_y, 1, 0)};
  double Bpar[2] = {make_MuonArray(bin_x, bin_y, 0, 1), make_MuonArray(bin_x, bin_y, 1, 1)};  
  double Cpar[2] = {make_MuonArray(bin_x, bin_y, 0, 2), make_MuonArray(bin_x, bin_y, 1, 2)};
  double Dpar[2] = {make_MuonArray(bin_x, bin_y, 0, 3), make_MuonArray(bin_x, bin_y, 1, 3)};

  //take the parameters, give the number of primary vertices and calculate the corresponding efficiency
  double Aweight = VFunction(npvertices,Apar);
  double Bweight = VFunction(npvertices,Bpar);
  double Cweight = VFunction(npvertices,Cpar);
  double Dweight = VFunction(npvertices,Dpar);

  //get the weighted fraction of the run period
  double ALumi = fractionDatasets[0]*0.719;
  double BLumi = fractionDatasets[1]*4.518;
  double CLumi = fractionDatasets[2]*7.000;
  double DLumi = fractionDatasets[3]*1.300;
  
  //calculate the weighted efficiency in percentage
  double weight = (ALumi*Aweight + BLumi*Bweight + CLumi*Cweight + DLumi*Dweight)/(ALumi+BLumi+CLumi+DLumi);

  return weight;
}

//Returns the weight, in percentage, for the electron leg of the electron+jets crosstrigger
double TopTriggerEfficiencyProvider::GetElectronWeight(double pt, double eta, int npvertices, double fractionDatasets[4])
{
  double EleEtaBins[14] = {-2.5,-2.1,-1.8,-1.566,-1.4442,-0.9,-0.3,0.3,0.9,1.4442,1.566,1.8,2.1,2.5};
  double ElePtBins[9] = {30,35,40,45,50,55,65,90,250};
  int nEleEtabins = 13;
  int nElePtbins = 8;

  //basic check on the cutselection, is in no way complete
  if(fabs(eta) > 2.5 || pt < 30){std::cout<<"Your electron cut is not in sync with the Top reference selection! Please check your cutset again."<<std::endl; return 100;}

  int bin_x = 0;
  int bin_y = 0;
  
  //check in which bin the eta of the electron lies
  for(int i=1; i < nEleEtabins; i++){
    if(eta < EleEtaBins[i] ){
      bin_x = i;
      break;
    }
  }
  //check in which bin the pt of the electron lies
  for(int i=1; i < nElePtbins; i++){
    if(pt < ElePtBins[i] ){
      bin_y = i;
      break;
    }
  }

  //obtain the fit parameters for the relevant bin for each datataking period
  double Apar[2] = {make_ElectronArray(bin_x, bin_y, 0, 0), make_ElectronArray(bin_x, bin_y, 1, 0)};
  double Bpar[2] = {make_ElectronArray(bin_x, bin_y, 0, 1), make_ElectronArray(bin_x, bin_y, 1, 1)};
  double Cpar[2] = {make_ElectronArray(bin_x, bin_y, 0, 2), make_ElectronArray(bin_x, bin_y, 1, 2)};
  double Dpar[2] = {make_ElectronArray(bin_x, bin_y, 0, 3), make_ElectronArray(bin_x, bin_y, 1, 3)};

  //take the parameters, give the number of primary vertices and calculate the corresponding efficiency
  double Aweight = VFunction(npvertices,Apar);
  double Bweight = VFunction(npvertices,Bpar);
  double Cweight = VFunction(npvertices,Cpar);
  double Dweight = VFunction(npvertices,Dpar);

  //get the weighted fraction of the run period
  double ALumi = fractionDatasets[0]*0.719;
  double BLumi = fractionDatasets[1]*4.518;
  double CLumi = fractionDatasets[2]*7.000;
  double DLumi = fractionDatasets[3]*1.300;

  //calculate the weighted efficiency in percentage
  double weight = (ALumi*Aweight + BLumi*Bweight + CLumi*Cweight + DLumi*Dweight)/(ALumi+BLumi+CLumi+DLumi);

  return weight;

}

//Returns the weight, in percentage, for the hadronic leg of the lepton+jets crosstrigger
double TopTriggerEfficiencyProvider::GetJetWeight(double pt, double eta, int njets, double fractionDatasets[4])
{
  
  double JetEtaBins[10] = {-2.5,-1.75,-1.25,-0.75,-0.25,0.25,0.75,1.25,1.75,2.5};
  double numberOfJets[5] = {3.5,4.5,5.5,6.5,7.5};
  double JetPtBins[12] = {20,22.5,25,27.5,30,32.5,35,37.5,40,42.5,45,100};
  int nJetEtabins = 9;
  int nJetJetbins = 4;
  int nJetPtbins = 11;

  //basic check on the cutselection, is in no way complete
  if(pt < 20 || njets < 4){std::cout<<"Your jet cut is not in sync with the Top reference selection! Please check your cutset again."<<std::endl; return 100;}
  
  int bin_x = 0;
  int bin_y = 0;
  int bin_z = 0;

  //check in which bin the number of jets in the event lies
  for(int i=1; i < nJetJetbins; i++){
    if(njets < numberOfJets[i] ){
      bin_x = i;
      break;
    }
  }
  //check in which bin the eta of the jet lies
  for(int i=1; i < nJetEtabins; i++){
    if(eta < JetEtaBins[i] ){
      bin_y = i;
      break;
    }
  }
  //check in which bin the pt of the jet lies
  for(int i=1; i < nJetPtbins; i++){
    if(pt < JetPtBins[i]){
      bin_z = i;
      break;
    }
  }
  
  //calculate the weighted efficiency in percentage, the weighting is taken care of in the make_JetArray function itself
  double weight = make_JetArray(bin_x, bin_y, bin_z, fractionDatasets);
  
  //basic validity check
  if(weight == 0. || weight > 100.0){weight = 100.0;}
  return weight;
}


//this function is unused at the moment, but can be necessary with future updates
double TopTriggerEfficiencyProvider::TurnOn(double x, double par[4])
{
  double arg  = 0;
  double arg2 = 0;
  arg2 = (x - par[3])/ (TMath::Sqrt(2.)*par[4]);
  
  if ( fabs (TMath::Sqrt(x)*par[1]) > 0)
    arg = (x - par[0])/ (TMath::Sqrt(x)*par[1]);
  else arg = 100000000000.;
  
  double fitval =0.5*par[2]*(1+TMath::Erf(arg)+TMath::Erf(arg2));                                                          
  return fitval;
  
}

//function to obtain the efficiency as a function of the variable x, when the functional dependence is a straight line
double TopTriggerEfficiencyProvider::VFunction(int x, double par[2])
{
  double fitval = par[0]*x + par[1];
  //basic validity check
  if(fitval == 0. || fitval > 100.0){fitval = 100.0;}
  return fitval;
}


